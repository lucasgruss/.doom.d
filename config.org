#+TITLE:  Configuration for my kitchen sink
#+AUTHOR: Lucas Gruss

* Table of content :TOC:
- [[#introduction][Introduction]]
- [[#doom-stuff][Doom stuff]]
  - [[#initel][init.el]]
  - [[#packagesel][packages.el]]
- [[#window-management][Window management]]
  - [[#zoom-mode][Zoom mode]]
  - [[#windmove][Windmove]]
  - [[#framemove][Framemove]]
  - [[#windower][Windower]]
- [[#convenience][Convenience]]
  - [[#which-key][Which-key]]
  - [[#deft][Deft]]
- [[#theme][Theme]]
  - [[#theme-magic][Theme magic]]
  - [[#theme-choice][Theme choice]]
  - [[#modeline][Modeline]]
- [[#org-mode][Org mode]]
  - [[#latex][Latex]]
  - [[#calfw][Calfw]]
  - [[#org-sidebar][Org-sidebar]]
  - [[#presentation-mode][Presentation mode]]
- [[#completions][Completions]]
  - [[#ivy][Ivy]]
  - [[#counsel][Counsel]]
  - [[#ivy-posframe][Ivy-posframe]]
  - [[#ivy-spotify][Ivy-Spotify]]
  - [[#orderless][Orderless]]
- [[#elfeed][Elfeed]]
- [[#ripgrep][Ripgrep]]
- [[#treemacs][Treemacs]]
- [[#keybindings][Keybindings]]

* Introduction
This is my configuration file for Doom Emacs. It is a self contained document
with everything needed to set up Doom. Normally you customize Doom by editing
three =.el= files, which are =config.el=, =packages.el= and =init.el=. Thanks to
the =literate= config module, it is possible to have all three in the same org
document and they get automatically tangled in the right place upon saving this
file. Without having to set anything up!

This is why I love Doom, I used to have an org configuration that was hell to
maintain and that would never have been nearly as performant. But Doom allows me
to keep the same workflow, and has saved me a /ton/ of time, and now my config
file is about four times smaller than it was.

* Doom stuff
** init.el
This is my doom block. What it contains is pretty self explanatory.

#+begin_src emacs-lisp :tangle init.el
;;; init.el -*- lexical-binding: t; -*-

(doom! :input
       ;;chinese
       ;;japanese

       :completion
       company           ; the ultimate code completion backend
       ;;(helm +fuzzy +icons +childframe)              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       (ivy +icons +prescient +fuzzy) ; a search engine for love and life

       :ui
       deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
       doom-quit         ; DOOM quit-message prompts when you quit Emacs
       ;;fill-column       ; a `fill-column' indicator
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       hydra
       indent-guides     ; highlighted indent columns
       modeline         ; snazzy, Atom-inspired modeline, plus API
       nav-flash         ; blink the current line after jumping
       ;;neotree           ; a project drawer, like NERDTree for vim
       ophints           ; highlight the region an operation acts on
       (popup +defaults +hacks)   ; tame sudden yet inevitable temporary windows
       ;;ligatures       ; ligatures or substitute text with pretty symbols
       ;;tabs              ; an tab bar for Emacs
       treemacs          ; a project drawer, like neotree but cooler
       ;;unicode           ; extended unicode support for various languages
       vc-gutter         ; vcs diff in the fringe
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       ;;window-select     ; visually switch windows
       ;;workspaces        ; tab emulation, persistence & separate workspaces
       zen               ; distraction-free coding or writing

       :editor
       (evil +everywhere); come to the dark side, we have cookies
       file-templates    ; auto-snippets for empty files
       fold              ; (nigh) universal code folding
       ;;(format +onsave)  ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       ;;multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       ;;rotate-text       ; cycle region at point between text candidates
       snippets          ; my elves. They type so I don't have to
       ;;word-wrap         ; soft wrapping with language-aware indent

       :emacs
       (dired +ranger +icons)   ; making dired pretty [functional]
       electric          ; smarter, keyword-based electric-indent
       ibuffer         ; interactive buffer management
       vc                ; version-control and Emacs, sitting in a tree

       :term
       eshell            ; a consistent, cross-platform shell (WIP)
       ;;shell             ; a terminal REPL for Emacs
       term              ; terminals in Emacs
       ;;vterm             ; another terminals in Emacs

       :checkers
       syntax              ; tasing you for every semicolon you forget
       ;;spell             ; tasing you for misspelling mispelling
       ;;grammar           ; tasing grammar mistake every you make

       :tools
       ;;ansible
       ;;debugger          ; FIXME stepping through code, to help you add bugs
       ;;direnv
       ;;docker
       ;;editorconfig      ; let someone else argue about tabs vs spaces
       ;; ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       ;;gist              ; interacting with github gists
       (lookup +docsets +dictionnary +offline)               ; navigate your code and its documentation
       ;;lsp
       ;;macos             ; MacOS-specific commands
       magit             ; a git porcelain for Emacs
       make              ; run make tasks from Emacs
       pass              ; password manager for nerds
       pdf               ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       ;;rgb               ; creating color strings
       ;;terraform         ; infrastructure as code
       ;;tmux              ; an API for interacting with tmux
       upload            ; map local to remote projects via ssh/ftp

       :lang
       ;;agda              ; types of types of types of types...
       ;;assembly          ; assembly for fun or debugging
       cc                ; C/C++/Obj-C madness
                                        ;clojure           ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       data              ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp        ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;faust             ; dsp, but you get to keep your soul
       ;;fsharp           ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;go                ; the hipster dialect
       ;;(haskell +dante)  ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ;
       ;;(java +meghanada) ; the poster child for carpal tunnel syndrome
       ;;javascript        ; all(hope(abandon(ye(who(enter(here))))))
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       latex             ; writing papers in Emacs has never been so fun
       ;;lean
       ;;factor
       ;;ledger            ; an accounting system in Emacs
       lua               ; one-based indices? one-based indices
       markdown          ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       ;;nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       (org +roam +noter +present +pretty)               ; organize your plain life in plain text
       ;;perl              ; write code no one else can comprehend
       ;;php               ; perl's insecure younger brother
       ;;plantuml          ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       python; +lsp)           ; beautiful is better than ugly
       ;;qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       ;;rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       ;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       ;;rust              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       ;;scheme            ; a fully conniving family of lisps
       sh                ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       ;;web               ; the tubes

       :email
       (mu4e +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       ;;calendar
       ;;irc               ; how neckbeards socialize
       (rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought

       :config
       literate
       (default +bindings +smartparens)

       :personal
       exwm
   ;;    selectrum
       )
#+end_src

** packages.el
#+begin_src emacs-lisp :tangle packages.el
(package! modus-vivendi-theme)
(package! modus-operandi-theme)
(package! theme-magic)
(package! explain-pause-mode
  :recipe (:host github
           :repo "lastquestion/explain-pause-mode"))
(package! windower)
(package! counsel-spotify)
(package! ivy-yasnippet)
(package! orderless)
(package! solaire-mode :disable t)
(package! rg)
(package! zoom)
(package! hyperbole)
(package! calfw
  :recipe (:host github
           :repo "kiwanami/emacs-calfw"))
(package! calfw-org
  :recipe (:host github
           :repo "kiwanami/emacs-calfw"))
(package! org-tree-slide)
(package! org-superstar)
(package! org-sidebar)
(package! framemove
  :recipe (:host github
           :repo "emacsmirror/emacswiki.org"
           :files ("framemove.el")))
(package! w3m)
(package! evil-tutor)
#+end_src

* Theme
** Theme choice

#+begin_src emacs-lisp :tangle config.el
;; (run-at-time "9:00" nil (lambda () (setq! doom-theme 'modus-operandi)))
;; (run-at-time "21:00" nil (lambda () (setq! doom-theme 'modus-vivendi)))
(setq! doom-theme 'modus-vivendi)

(setq! doom-font "Iosevka")
(set-face-attribute 'default nil :family "Iosevka")

(defmacro modus-themes-format-sexp (sexp &rest objects)
  `(eval (read (format ,(format "%S" sexp) ,@objects))))

(dolist (theme '("operandi" "vivendi"))
  (modus-themes-format-sexp
   (setq modus-%1$s-theme-slanted-constructs t
         modus-%1$s-theme-bold-constructs t
         modus-%1$s-theme-fringes 'subtle ; {nil,'subtle,'intense}
         modus-%1$s-theme-mode-line '3d ; {nil,'3d,'moody}
         modus-%1$s-theme-faint-syntax nil
         modus-%1$s-theme-intense-hl-line t
         modus-%1$s-theme-intense-paren-match t
         modus-%1$s-theme-no-link-underline t
         modus-%1$s-theme-prompts nil ; {nil,'subtle,'intense}
         modus-%1$s-theme-completions nil ; {nil,'moderate,'opinionated}
         modus-%1$s-theme-diffs nil ; {nil,'desaturated,'fg-only}
         modus-%1$s-theme-org-blocks 'greyscale ; {nil,'greyscale,'rainbow}
         modus-%1$s-theme-rainbow-headings t
         modus-%1$s-theme-variable-pitch-headings nil
         modus-%1$s-theme-scale-headings t
         modus-%1$s-theme-scale-1 1.1
         modus-%1$s-theme-scale-2 1.15
         modus-%1$s-theme-scale-3 1.21
         modus-%1$s-theme-scale-4 1.27
         modus-%1$s-theme-scale-5 1.33)
   theme))

(defun my/toggle-transparency ()
  "Toggle the transparency of Emacs on and off"
  (interactive)
  (let ((alpha (frame-parameter nil 'alpha)))
    (set-frame-parameter
     nil 'alpha
     (if (eql (cond ((numberp alpha) alpha)
                    ((numberp (cdr alpha)) (cdr alpha))
                    ;; Also handle undocumented (<active> <inactive>) form.
                    ((numberp (cadr alpha)) (cadr alpha)))
              100)
         '(91 . 80) '(100 . 100)))))
#+end_src

** Modeline

#+begin_src emacs-lisp :tangle config.el
(after! doom-modeline
  (progn
    (setq doom-modeline-buffer-file-name-style 'auto
          doom-modeline-bar-width (frame-parameter nil 'left-fringe)
          doom-modeline-height 10
          doom-modeline-icon t
          all-the-icons-scale-factor 1
          display-time-format " %H:%M - %Y/%m/%d ")
    (display-time-mode +1)))
#+end_src

** Theme magic

In the offchance I am not using emacs for something, then set the same theme
through Xressources.

#+begin_src emacs-lisp :tangle config.el
(use-package! theme-magic
  :config
  (theme-magic-export-theme-mode +1))
#+end_src

* Window management
** Zoom mode
Zoom is a nice package for window management in emacs. It enlarges the window
that has focus.
#+begin_src emacs-lisp :tangle config.el
(use-package! zoom
  :config
  (map!
   :leader
   (:prefix ("t" . "toggle")
    :desc "Zoom mode" "Z" #'zoom-mode))
  (zoom-mode -1))
#+end_src

** Windmove
#+begin_src emacs-lisp :tangle config.el
(use-package! windmove
  :init
  (map! "s-h" #'windmove-left
        "s-j" #'windmove-down
        "s-k" #'windmove-up
        "s-l" #'windmove-right)
  :config
  (setq! windmove-wrap-around nil
         windmove-window-distance-delta 1))
#+end_src

** Framemove

Framemove extends windmove and allows to move from frame to frame. It makes
switching from screen to screen easier in EXWM.
#+begin_src emacs-lisp :tangle config.el
(use-package! framemove
  :config
  (setq framemove-hook-into-windmove t))
#+end_src

** Windower
#+begin_src emacs-lisp :tangle config.el
(use-package! windower
  :init
  (map! "s-H"     #'windower-swap-left
        "s-J"     #'windower-swap-below
        "s-K"     #'windower-swap-above
        "s-L"     #'windower-swap-right
        "s-M-h"   #'windower-move-border-left
        "s-M-j"   #'windower-move-border-below
        "s-M-k"   #'windower-move-border-above
        "s-M-l"   #'windower-move-border-right
        "s-<tab>" #'windower-switch-to-last-buffer
        "s-o"     #'windower-toggle-single
        "s-\\"    #'windower-toggle-split))
#+end_src

* Convenience
#+begin_src emacs-lisp :tangle config.el
(explain-pause-mode -1)
(server-start)
(load! "private.el") ; credentials and private info
(setq! org-directory "~/org/"
       display-line-numbers-type `relative
       window-min-height 1
       idle-update-delay 0.2)

(defun my/kill-this-buffer ()
  "Kill the current buffer without confirmation"
  (interactive)
  (kill-buffer (current-buffer)))
#+end_src

** Which-key
Which key is one of the killer features for using emacs, it's good to discover
commands and also to not worry about remembering keybindings. I have nothing but
praise for this package *but* the way Doom Emacs sets it makes it pop too
slowly. I want it to appear almost instantaneously.

#+begin_src emacs-lisp :tangle config.el
(after! which-key
  ;; which-key-idle-delay must be set before enabling the mode
  ;; so we disable it, set the variable and re-enable it
  (which-key-mode -1)
  (setq! which-key-idle-delay 0.05)
  (which-key-mode +1))
#+end_src

** Deft
#+BEGIN_SRC emacs-lisp :tangle config.el
(setq deft-directory "~/org")
#+END_SRC

* Hyperbole
Hyperbole is basically hypertext everywhere. Hyperbole understands context and
can call the appropriate action on a piece of text.

#+begin_src emacs-lisp :tangle config.el
(use-package! hyperbole)
#+end_src

* Org mode
** Latex

#+begin_src emacs-lisp :tangle config.el
;; (after! org
;;   (add-to-list 'org-latex-classes '("lettre" "\\documentclass[11pt]{lettre}
;; \\usepackage[utf8]{inputenc}
;; \\usepackage[T1]{fontenc}
;; \\usepackage{lmodern}
;; \\usepackage{eurosym}
;; \\usepackage[french]{babel}"
;;                                     ("\\section{%s}" . "\\section*{%s}")
;;                                     ("\\subsection{%s}" . "\\subsection*{%s}")
;;                                     ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
;;                                     ("\\paragraph{%s}" . "\\paragraph*{%s}")
;;                                     ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
#+end_src

** Calfw

#+begin_src emacs-lisp :tangle no
(use-package! calfw
  :after org)
(use-package! calfw-org
  :after calfw)
#+end_src

** Org-sidebar

#+begin_src emacs-lisp :tangle no
(use-package! org-sidebar
  :after org)
#+end_src

** Org-superstar

Pretty org bullet.
#+begin_src emacs-lisp :tangle config.el
(use-package! org-superstar              ; supersedes `org-bullets'
  :after org
  :config
  (setq org-superstar-remove-leading-stars t)
  (setq org-superstar-headline-bullets-list
        '("🞛" "◉" "○" "▷"))
  (setq org-superstar-item-bullet-alist
        '((?+ . ?•)
          (?* . ?➤)
          (?- . ?–)))
  (org-superstar-mode 1))
#+end_src

** Presentation mode

#+begin_src emacs-lisp :tangle config.el
(use-package! org-tree-slide
  :after org
  :commands prot/org-presentation-mode
  :init
  (map! (:leader
         (:prefix ("t" . "toggle")
          :desc "Org presentation mode" "P" #'prot/org-presentation-mode)))
  :config
  (setq org-tree-slide-breadcrumbs nil)
  (setq org-tree-slide-header nil)
  (setq org-tree-slide-slide-in-effect nil)
  (setq org-tree-slide-heading-emphasis nil)
  (setq org-tree-slide-cursor-init t)
  (setq org-tree-slide-modeline-display nil)
  (setq org-tree-slide-skip-done nil)
  (setq org-tree-slide-skip-comments t)
  (setq org-tree-slide-fold-subtrees-skipped t)
  (setq org-tree-slide-skip-outline-level 2)
  (setq org-tree-slide-never-touch-face t)
  (setq org-tree-slide-activate-message
        (propertize "Presentation mode ON" 'face 'success))
  (setq org-tree-slide-deactivate-message
        (propertize "Presentation mode OFF" 'face 'error))

  (define-minor-mode prot/org-presentation-mode
    "Parameters for plain text presentations with `org-mode'."
    :init-value nil
    :global nil
    (if prot/org-presentation-mode
        (progn
          (unless (eq major-mode 'org-mode)
            (user-error "Not in an Org buffer"))
          (org-tree-slide-mode 1)
          (writeroom-mode 1)
          (org-superstar-mode 1)
          (setq-local display-line-numbers nil)
          (org-indent-mode 1))
      (org-tree-slide-mode -1)
      (writeroom-mode -1)
      (org-superstar-mode -1)
      (setq-local display-line-numbers 'relative)
      (org-indent-mode -1)))

  :bind (("C-c P" . prot/org-presentation-mode)
         :map org-tree-slide-mode-map
         ("C-h" . org-tree-slide-display-header-toggle)
         ("C-l" . org-tree-slide-display-header-toggle)
         ("C-j" . org-tree-slide-move-next-tree)
         ("C-k" . org-tree-slide-move-previous-tree)))
#+end_src

** Org-noter

#+begin_src emacs-lisp :tangle config.el
(after! org-noter
  (progn
    (map!
     (:after (org-noter)
      :map pdf-view-mode-map
      :n "i" #'org-noter-insert-note))))
#+end_src

* PDF
** pdf-tools

#+begin_src emacs-lisp :tangle config.el
(setq pdf-view-midnight-colors '("#ffffff" . "#000000"))
#+end_src

* Completions
** Ivy

#+begin_src emacs-lisp :tangle config.el
(after! ivy
  (progn
    (map! (:map ivy-minibuffer-map
           "M-<tab>" #'next-line
           "<M-iso-lefttab>" #'previous-line))
    (setq ivy-fixed-height-minibuffer nil
          ivy-add-newline-after-prompt nil)))
#+end_src

** Counsel

#+begin_src emacs-lisp :tangle config.el
(after! counsel
  (progn
    (map! "M-<tab>" #'counsel-switch-buffer
          (:leader
           (:prefix ("b" . "buffer")
            "b"   #'counsel-switch-buffer
            "o"   #'counsel-switch-buffer-other-window
            "C-b" #'counsel-switch-buffer-other-window)))))
#+end_src

** Ivy-posframe

#+BEGIN_SRC emacs-lisp :tangle config.el
(after! ivy-posframe
  (progn
    (setq ivy-posframe-border-width 1)
    (setq ivy-posframe-parameters nil)
    (when (featurep! :personal exwm)
      (ivy-posframe-mode -1))))
#+END_SRC

** Ivy-Spotify

#+begin_src emacs-lisp :tangle config.el
(use-package! counsel-spotify
  :commands
  (counsel-spotify-next
   counsel-spotify-previous
   counsel-spotify-toggle-play-pause
   counsel-spotify-search-album
   counsel-spotify-search-track
   counsel-spotify-search-artist
   counsel-spotify-search-playlist)
  :init
  (defvar counsel-spotify-map (make-sparse-keymap))
  (define-key! counsel-spotify-map
    "a"  #'counsel-spotify-toggle-play-pause
    "n"  #'counsel-spotify-next
    "p"  #'counsel-spotify-previous
    "j"  #'counsel-spotify-next
    "k"  #'counsel-spotify-previous
    "s"  nil
    "sA" #'counsel-spotify-search-album
    "sa" #'counsel-spotify-search-artist
    "st" #'counsel-spotify-search-track
    "sp" #'counsel-spotify-search-playlist)
  (map! (:leader
         :desc "audio" "a" counsel-spotify-map))
  :config
  (cl-defmethod counsel-spotify-do-play ((backend counsel-spotify-linux-backend) (something (eql nil)))
    nil))
#+end_src

** Ivy-yasnippet

Snippets are cool, but being able to narrow, preview and discover snippets is
even cooler !

#+begin_src emacs-lisp :tangle config.el
(use-package! ivy-yasnippet
  :init
  (map! (:leader
         (:prefix ("i" . "insert")
          :desc "Snippet" "s" #'ivy-yasnippet))))
#+end_src

** Orderless

#+begin_src emacs-lisp :tangle no
(use-package! orderless
  :config
  (setq completion-styles '(orderless)))
#+end_src

* Elfeed

#+begin_src emacs-lisp :tangle config.el
(after! elfeed
  (progn
    (map! (:leader
           (:prefix ("o" . "open")
            :desc "El[f]eed"         "f" #'elfeed
            :desc "El[F]eed update"  "F" #'elfeed-update)))))
#+end_src

* Ripgrep

#+begin_src emacs-lisp :tangle config.el
(use-package! rg)
#+end_src

* Treemacs

#+begin_src emacs-lisp :tangle config.el
(when (featurep! :ui treemacs)
  (map! (:leader
         (:prefix ("t" . "toggle")
          :desc "Treemacs" "T" #'treemacs)))
  (setq treemacs-width 20))
#+end_src

* Terminal
#+begin_src emacs-lisp :tangle config.el
(setq vterm-module-cmake-args "-DUSE_SYSTEM_LIBVTERM=no")
#+end_src
* Browsing the internet
** TODO Eww
** w3m

* Keybindings
** Evil mode
#+begin_src emacs-lisp :tangle yes
(after! evil
  (progn
    (map! :n
          "C-e" #'end-of-line)))

(use-package! evil-tutor)
#+end_src

** Misc
#+begin_src emacs-lisp :tangle config.el
(map! "M-j" #'drag-stuff-down
      "M-k" #'drag-stuff-up
      (:leader
       :desc "Control-x" "x" ctl-x-map
       (:prefix ("f" . "file")
        "o"   #'find-file-other-window
        "C-f" #'find-file-other-window)
       (:prefix ("o" . "open")
        :desc "Spotify"                "s" #'my/run-or-raise-or-dismiss-spotify
        :desc "Firefox"                "i" #'my/run-or-raise-or-dismiss-firefox))
      ;; (:map ivy-minibuffer-map
      ;;  "M-<tab>" #'next-line
      ;;  "<M-iso-lefttab>" #'previous-line)
      (:n "gss" #'avy-goto-char-timer)
      ;; "<s-return>" #'+term/toggle
      ;; "<S-s-return>" #'+term/here
      "<s-backspace>" #'my/kill-this-buffer)
#+end_src
